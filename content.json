{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://fyfox.top","root":"/"},"pages":[],"posts":[{"title":"Hexo搭建","slug":"Hexo搭建","date":"2020-03-01T05:09:28.000Z","updated":"2020-03-22T10:06:24.660Z","comments":true,"path":"2020/03/01/Hexo搭建/","link":"","permalink":"http://fyfox.top/2020/03/01/Hexo%E6%90%AD%E5%BB%BA/","excerpt":"搭建流程 安装git、Node.Js和Hexo 创建github个人仓库 为个人仓库添加SSH keys 部署hexo到github仓库 设置个人域名 发布文章","text":"搭建流程 安装git、Node.Js和Hexo 创建github个人仓库 为个人仓库添加SSH keys 部署hexo到github仓库 设置个人域名 发布文章 安装git、Node.Js和Hexo 1.安装git 下载地址 安装最后一步添加路径时选择Use Git from the Windows Command Prompt，这样可以直接在命令提示符里使用git命令 安装完成后在命令提示符里输入git --version检查是否安装成功 2.安装Node.Js hexo基于node.js编写，需要先安装node.js和里面的npm工具 下载最新安装包进行安装： 下载地址 安装完成后在命令提示符里输入node -v和npm -v检查是否安装成功 3.安装Hexo 安装完git和node.js后就可以安装hexo了。在电脑上创建一个空文件夹如HexoBlog，用来存放博客文件；在这个目录下右键git bash here打开命令窗口 在命令窗输入npm install -g hexo-cli安装hexo，中途可能会有报错信息，可以无视。 1npm install -g hexo-cli 安装完输入hexo -v检查是否安装成功 至此hexo环境搭建完成，接下来初始化hexo，需要在HexoBlog的上层目录执行以下命令 1hexo init HexoBlog 输入npm install安装必备组件 1npm install 如果初始化后目录下已经产生node_modules文件夹，则可以不用执行 新建完成后，博客目录HexoBlog下有以下文件夹： node_modules：组件包 public：存放生成的网页文件 scaffolds：生成文章的一些模板 source：存放文章 themes：博客主题文件 _config.yml：博客配置文件 创建github个人仓库 注册一个github账号，注册完新建一个repository用于存放网站静态文件。 仓库名须和用户名完全一致，后缀为.github.io，库的私密性要设置为public 添加SSH keys 添加SSH到github，用于连接github与本地 右键git bash here，打开命令窗口，输入： 12git config --global user.name \"name\"git config --global user.email \"email\" name输入自己的github用户名，email输入github邮箱，这样github才能对应相应的账户信息。 可以通过以下命令，检查是否输入正确： 12git config user.namegit config user.email 无误后通过以下命令创建SSH，一路回车即可 1ssh-keygen -t rsa -C \"email\" 命令会生成.ssh文件夹，在电脑用户文件夹内；打开id_rsa.pub文件，复制其中内容。 打开github网站，点击settings，点击SSH and GPG keys，新建一个SSH keys，title内容自定即可，Key内填入公钥，即id_rsa.pub里的内容 在git bash里输入ssh -T git@github.com ，如果出现自己的用户名，表示设置成功。 SSH通过密钥对进行连接，id_rsa为私人密钥，不能泄露；id_rsa.pub是公共密钥，可以随便给人看。公钥放置在github上，任何人都可访问，但只有配对的私钥才能连接 部署hexo到github 将hexo与github关联起来，用来部署hexo文章到github，打开博客根目录下的配置文件_config.yml，这里可以修改与博客配置相关的各种信息，注意备份。 修改最后一行的配置： 1234deploy: type: git repository: https://github.com/wanouing/wanouing.github.io/ branch: master repository修改为自己的项目仓库，部署时，工具将通过git方式上传网页文件到对应仓库 使用前需要提前安装deploy-git： 1npm install hexo-deployer-git --save 使用deploy部署时可能需要输入github的username和password 设置个人域名 github的默认域名为name.github.io且不能修改，可自己设置个人域名，但需提前购买域名。 进入域名解析设置，添加一条CNAME记录： 打开github博客仓库，点击settings（是仓库的settings不是网站的settings），在Custom domain下填写自己的个人域名，保存 这时，项目根目录下应该会生成一个名为CNAME的文件，如果没有就新建一个CNAME文件（一定要大写），内容添加自己的域名信息 发布文章 在博客根目录下右键git bash here： 1hexo new post \"article title\" //新建文章 常用hexo命令： 123hexo clean //清除生成的静态文件 hexo generate //生成静态文件 可用 hexo g 缩写hexo deploy //部署文件到github 可用 hexo d 缩写 git add . git commit -am ‘del’","categories":[],"tags":[]},{"title":"Google Cloud Platform SSH 连接配置","slug":"Google Cloud Platform SSH 连接配置","date":"2019-11-16T15:30:00.000Z","updated":"2020-02-29T08:29:57.797Z","comments":true,"path":"2019/11/16/Google Cloud Platform SSH 连接配置/","link":"","permalink":"http://fyfox.top/2019/11/16/Google%20Cloud%20Platform%20SSH%20%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE/","excerpt":"通过密钥对连接 1.在实例服务器上生成私钥和公钥","text":"通过密钥对连接 1.在实例服务器上生成私钥和公钥 12345678910111213141516171819202122$ cd ~/.ssh # 进入当前用户主目录下的`.ssh`文件夹$ ssh-keygen -f myKey #密钥文件名myKey可自定义Generating public/private rsa key pair.Enter passphrase (empty for no passphrase): (给 private key 设置一个密码，避免私钥被人盗用的风险)Enter same passphrase again: (再次输入上次相同密码)Your identification has been saved in myKey.Your public key has been saved in myKey.pub.The key fingerprint is:SHA256:EW7ow1wCKAh1rM/GG08ZAwOy+7+SUiT0rFXY2f8mNvk user@computer-name.localThe key's randomart image is:+---[RSA 2048]----+|=.o+= o . ||o+.o+= + . ||o.o..oo * ||..o+ +o+ o ||.oo+ =+S o || o. * o. = o || ..o = . = ||. o.. . E || . .o. |+----[SHA256]-----+# 此时会生成 公钥 myKey.pub 和 私钥 myKey 2.复制公钥 12345$ cat myKey.pubssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCjHKPaeglRVJzAhNq+W中间部分省略。。。dKx8sJ0Rw4kUqm2eU2vo8S5IEA0Nk2f7BtVGE8VOCHgmDbv2tLp9845UVp1 user@computer-name.local# 把这长长的一段复制下来，把其中的 user@computer-name.local 改为你在浏览器 SSH 登入之后的当前用户名 $&#123;whoami&#125; 3.导入公钥到谷歌云实例 12# 进入谷歌云平台页面 -&gt; 计算引擎 -&gt; 元数据 -&gt; SSH 密钥，粘贴保存# 谷歌就会把上面这段 public key 写入到对应用户 ~/.ssh/authorized_keys 4.本地通过私钥登录 12345678910111213141516$ ssh -i myKey user@xxx.xxx.xxx.xxxEnter passphrase for key 'myKey': (输入 private key 密码)Welcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.11.2-041102-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage Get cloud support with Ubuntu Advantage Cloud Guest: http://www.ubuntu.com/business/services/cloud83 packages can be updated.0 updates are security updates.Last login: Sun Oct 8 06:40:43 2017 from 115.200.175.117 通过密码验证连接 1.为实例用户创建新密码 创建实例后设置当前用户的新密码 12$ sudo passwd $&#123;whoami&#125; // 下面以 user 代替 $&#123;whoami&#125;# 输入新密码 随便设置下root的新密码（可选） 12$ sudo passwd root# 输入新密码 2.密码验证登录 123456789101112131415161718192021222324252627282930$ ssh user@xxx.xxx.xxx.xxxPermission denied (publickey).# 之所以会出现这种情况，因为谷歌默认把密码验证登录关了，需要自行打开$ sudo vi /etc/ssh/sshd_configPasswordAuthentication yes :wq!# 改完要重启 ssh 服务$ sudo service sshd restart# 再次连接$ ssh user@xxx.xxx.xxx.xxxuser@xxx.xxx.xxx.xxx's password: (输入实例用户的密码)Welcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.11.2-041102-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage Get cloud support with Ubuntu Advantage Cloud Guest: http://www.ubuntu.com/business/services/cloud83 packages can be updated.0 updates are security updates.Last login: Sun Oct 8 06:59:24 2017 from 115.200.175.117# 至此大功告成","categories":[],"tags":[{"name":"谷歌云","slug":"谷歌云","permalink":"http://fyfox.top/tags/%E8%B0%B7%E6%AD%8C%E4%BA%91/"},{"name":"SSH","slug":"SSH","permalink":"http://fyfox.top/tags/SSH/"}]},{"title":"冲击响应谱（SRS）","slug":"冲击响应谱（SRS）","date":"2019-07-06T19:23:05.000Z","updated":"2020-02-29T08:34:05.943Z","comments":true,"path":"2019/07/07/冲击响应谱（SRS）/","link":"","permalink":"http://fyfox.top/2019/07/07/%E5%86%B2%E5%87%BB%E5%93%8D%E5%BA%94%E8%B0%B1%EF%BC%88SRS%EF%BC%89/","excerpt":"冲击响应谱是一个基于频率的函数，用于指示冲击或瞬态过程的振动幅值。冲击响应谱可以量化各式各样的瞬态振动过程：地震过程、爆破事件、弹道冲击（图1）等等。 图1 海军舰船冲击测试","text":"冲击响应谱是一个基于频率的函数，用于指示冲击或瞬态过程的振动幅值。冲击响应谱可以量化各式各样的瞬态振动过程：地震过程、爆破事件、弹道冲击（图1）等等。 图1 海军舰船冲击测试 例如，一艘舰船经受来自附近爆炸的瞬态振动，此时在冲击过程中，就可以测量和捕捉舰船关键部分的冲击响应谱。通过测量的冲击响应谱，实验室内可重现关键部件所承受的瞬态冲击振动，从而保证其能承受实际的冲击工况。 1.什么是冲击响应谱 冲击响应谱的幅值是一系列单自由度质量-弹簧系统承受冲击或瞬态振动时的峰值响应，其横轴为单自由度系统的固有频率，如图2所示 图2 冲击响应谱绘制过程 历史上曾使用真实的质量-弹簧系统来测量冲击响应谱，然而如今，单自由度系统响应通常由测量或预测的加速度数据经计算机虚拟计算得到。 冲击响应谱的计算过程如下：","categories":[],"tags":[]}]}